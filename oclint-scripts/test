#! /usr/bin/env python

import argparse
import shutil
import subprocess
import sys
import os

from oclintscripts import environment
from oclintscripts import path

OCLINT_MODULES = ['core', 'metrics', 'rules', 'reporters']

arg_parser = argparse.ArgumentParser()
arg_parser.add_argument('module_name', nargs='?', choices=['all'] + OCLINT_MODULES, default='all')
arg_parser.add_argument('-show', '--show', action="store_true")
arg_parser.add_argument('-clean', '--clean', action="store_true")
arg_parser.add_argument('-j', type=int, default=0)
args = arg_parser.parse_args()

def clean_module(module_name):
    test_path = path.oclint_module_test_dir(module_name)
    if os.path.isdir(test_path):
        shutil.rmtree(test_path)

def build_command(module_extras, source_path):
    command = 'cmake'
    if environment.is_mingw32():
        command += ' -G "MSYS Makefiles"'
    command += ' -D TEST_BUILD=1'
    if environment.is_unix():
        clang_bin_path = os.path.join(path.build.clang_install_dir, 'bin', 'clang')
        command += ' -D CMAKE_CXX_COMPILER=' + clang_bin_path + '++ -D CMAKE_C_COMPILER=' + clang_bin_path
    extras = {'LLVM_ROOT': path.build.clang_install_dir, 'GOOGLETEST_SRC': path.source.googletest_dir, 'GOOGLETEST_BUILD': path.build.googletest_build_dir}
    extras.update(module_extras)
    for extra_key, extra_value in extras.items():
        command += ' -D ' + extra_key + '='
        if environment.is_mingw32():
            command += '"'
        command += extra_value
        if environment.is_mingw32():
            command += '"'
    command += ' '
    if environment.is_mingw32():
        command += '"'
    command += source_path
    if environment.is_mingw32():
        command += '"'
    return command

def test_result_path(module_name):
    return os.path.join(path.oclint_module_test_dir(module_name), 'testresults.txt')

def display_test_result(module_name):
    testresult_path = test_result_path(module_name)
    with open(testresult_path, 'r') as testresult_file:
        print testresult_file.read()

def test_module(module_name, multiple_thread):
    build_path = path.oclint_module_test_dir(module_name)
    source_path = path.oclint_module_source_dir(module_name)

    module_extras = {}
    if module_name == "rules" or module_name == "reporters":
        module_extras['OCLINT_SOURCE_DIR'] = path.source.core_dir
        module_extras['OCLINT_BUILD_DIR'] = path.build.core_test_dir
    if module_name == "rules":
        module_extras['OCLINT_METRICS_SOURCE_DIR'] = path.source.metrics_dir
        module_extras['OCLINT_METRICS_BUILD_DIR'] = path.build.metrics_test_dir

    command = build_command(module_extras, source_path)
    print command

    current_dir = os.getcwd()
    if not os.path.isdir(build_path):
        os.mkdir(build_path)
    os.chdir(build_path)
    cmake_exit_code = subprocess.call(command, shell=True)
    if cmake_exit_code:
        sys.exit(cmake_exit_code)
    make_exit_code = subprocess.call('make -j ' + multiple_thread, shell=True)
    if make_exit_code:
        sys.exit(make_exit_code)
    run_ctest_command = 'ctest --output-on-failure > ' + test_result_path(module_name)
    ctest_exit_code = subprocess.call(run_ctest_command, shell=True)
    if ctest_exit_code:
        sys.exit(ctest_exit_code)
    display_test_result(module_name)
    os.chdir(current_dir)

build_modules = []
if args.module_name == 'all':
    build_modules.extend(OCLINT_MODULES)
else:
    build_modules.append(args.module_name)

if args.show:
    for module in build_modules:
        display_test_result(module)
    sys.exit(0)

if args.clean:
    for module in build_modules:
        clean_module(module)

multiple_thread = environment.cpu_count()
if environment.is_mingw32():
    multiple_thread = 1
if not args.j is 0:
    multiple_thread = args.j

for module in build_modules:
    test_module(module, str(multiple_thread))
