#! /usr/bin/env python

import argparse
import shutil
import subprocess
import sys
import os

from oclintscripts import environment
from oclintscripts import path
from oclintscripts import version

arg_parser = argparse.ArgumentParser()
arg_parser.add_argument('-reset', '--reset', action="store_true")
arg_parser.add_argument('-setup', '--setup', action="store_true")
arg_parser.add_argument('-llvm-branch', '--llvm-branch', nargs='?', choices=version.llvm_branches(), default='trunk')
arg_parser.add_argument('-release', '--release', action="store_true")
arg_parser.add_argument('-jenkins', '--jenkins', action="store_true")
arg_parser.add_argument('-archive', '--archive', action="store_true")
args = arg_parser.parse_args()

def remove_dir(dir_path):
    if os.path.isdir(dir_path):
        shutil.rmtree(dir_path)

def run_command(command):
    command_exit_code = subprocess.call(command, shell=True)
    if command_exit_code:
        sys.exit(command_exit_code)

def upload_snapshot():
    pass

if args.reset:
    remove_dir(path.build_root)
    remove_dir(path.source.clang_dir)
    remove_dir(path.source.googletest_dir)
    remove_dir(path.source.json_compilation_database_dir)
    remove_dir(path.source.xcodebuild_dir)
    sys.exit(0)

if args.setup or args.jenkins:
    current_dir = os.getcwd()
    os.chdir(path.root_dir)
    run_command('git clone ' + path.url.json_compilation_database)
    if environment.is_darwin():
        run_command('git clone ' + path.url.xcodebuild)
    os.chdir(current_dir)
    run_command('python clang co -branch ' + args.llvm_branch)
    if args.release:
        run_command('python clang build -release -clean')
    else:
        run_command('python googleTest co')
        run_command('python clang build -clean')
        run_command('python googleTest build -clean')

if args.release:
    run_command('python build -clean -release')
else:
    run_command('python test -clean')
    run_command('python build -clean')
run_command('python bundle')
if environment.is_unix() and not args.release:
    if args.jenkins:
        run_command('python champagneDrinking -enable-clang-static-analyzer')
    else:
        run_command('python champagneDrinking')
if args.jenkins:
    run_command('python bundle -archive')
    if not args.release:
        upload_snapshot()
elif args.archive and args.release:
    run_command('python bundle -archive -release')
